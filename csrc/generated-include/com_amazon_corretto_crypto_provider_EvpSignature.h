/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_amazon_corretto_crypto_provider_EvpSignature */

#ifndef _Included_com_amazon_corretto_crypto_provider_EvpSignature
#define _Included_com_amazon_corretto_crypto_provider_EvpSignature
#ifdef __cplusplus
extern "C" {
#endif
#undef com_amazon_corretto_crypto_provider_EvpSignature_RSA_PKCS1_PADDING
#define com_amazon_corretto_crypto_provider_EvpSignature_RSA_PKCS1_PADDING 1L
#undef com_amazon_corretto_crypto_provider_EvpSignature_RSA_PKCS1_PSS_PADDING
#define com_amazon_corretto_crypto_provider_EvpSignature_RSA_PKCS1_PSS_PADDING 6L
/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    sign
 * Signature: (JJIJI[BII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_sign
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verify
 * Signature: (JJIJI[BII[BII)Z
 */
JNIEXPORT jboolean JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verify
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jbyteArray, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    signStart
 * Signature: (JJIJI[BII)J
 */
JNIEXPORT jlong JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_signStart
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    signStartBuffer
 * Signature: (JJIJILjava/nio/ByteBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_signStartBuffer
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jobject);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verifyStart
 * Signature: (JJIJI[BII)J
 */
JNIEXPORT jlong JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verifyStart
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verifyStartBuffer
 * Signature: (JJIJILjava/nio/ByteBuffer;)J
 */
JNIEXPORT jlong JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verifyStartBuffer
  (JNIEnv *, jclass, jlong, jlong, jint, jlong, jint, jobject);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    signUpdate
 * Signature: (J[BII)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_signUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    signUpdateBuffer
 * Signature: (JLjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_signUpdateBuffer
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verifyUpdate
 * Signature: (J[BII)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verifyUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verifyUpdateBuffer
 * Signature: (JLjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verifyUpdateBuffer
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    signFinish
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_signFinish
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_amazon_corretto_crypto_provider_EvpSignature
 * Method:    verifyFinish
 * Signature: (J[BII)Z
 */
JNIEXPORT jboolean JNICALL Java_com_amazon_corretto_crypto_provider_EvpSignature_verifyFinish
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
