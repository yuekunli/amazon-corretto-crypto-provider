/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_amazon_corretto_crypto_provider_AesGcmSpi */

#ifndef _Included_com_amazon_corretto_crypto_provider_AesGcmSpi
#define _Included_com_amazon_corretto_crypto_provider_AesGcmSpi
#ifdef __cplusplus
extern "C" {
#endif
#undef com_amazon_corretto_crypto_provider_AesGcmSpi_KEY_REUSE_THRESHOLD
#define com_amazon_corretto_crypto_provider_AesGcmSpi_KEY_REUSE_THRESHOLD 1L
#undef com_amazon_corretto_crypto_provider_AesGcmSpi_DEFAULT_TAG_LENGTH
#define com_amazon_corretto_crypto_provider_AesGcmSpi_DEFAULT_TAG_LENGTH 128L
#undef com_amazon_corretto_crypto_provider_AesGcmSpi_NATIVE_MODE_ENCRYPT
#define com_amazon_corretto_crypto_provider_AesGcmSpi_NATIVE_MODE_ENCRYPT 1L
#undef com_amazon_corretto_crypto_provider_AesGcmSpi_NATIVE_MODE_DECRYPT
#define com_amazon_corretto_crypto_provider_AesGcmSpi_NATIVE_MODE_DECRYPT 0L
#undef com_amazon_corretto_crypto_provider_AesGcmSpi_BLOCK_SIZE
#define com_amazon_corretto_crypto_provider_AesGcmSpi_BLOCK_SIZE 16L
/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    oneShotEncrypt
 * Signature: (J[J[BII[BII[B[B)I
 */
JNIEXPORT jint JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_oneShotEncrypt
  (JNIEnv *, jclass, jlong, jlongArray, jbyteArray, jint, jint, jbyteArray, jint, jint, jbyteArray, jbyteArray);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    oneShotDecrypt
 * Signature: (J[J[BII[BII[B[B[BI)I
 */
JNIEXPORT jint JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_oneShotDecrypt
  (JNIEnv *, jclass, jlong, jlongArray, jbyteArray, jint, jint, jbyteArray, jint, jint, jbyteArray, jbyteArray, jbyteArray, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    encryptInit
 * Signature: ([B[B)J
 */
JNIEXPORT jlong JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_encryptInit___3B_3B
  (JNIEnv *, jclass, jbyteArray, jbyteArray);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    encryptInit
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_encryptInit__J_3B
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    encryptUpdate
 * Signature: (J[BII[BI)I
 */
JNIEXPORT jint JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_encryptUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jbyteArray, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    encryptUpdateAAD
 * Signature: (J[BII)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_encryptUpdateAAD
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    encryptDoFinal
 * Signature: (JZ[BII[BII)I
 */
JNIEXPORT jint JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_encryptDoFinal
  (JNIEnv *, jclass, jlong, jboolean, jbyteArray, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     com_amazon_corretto_crypto_provider_AesGcmSpi
 * Method:    releaseContext
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_amazon_corretto_crypto_provider_AesGcmSpi_releaseContext
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
